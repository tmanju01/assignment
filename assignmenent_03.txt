             

                  MODULE: 4 (JavaScript Basic & DOM)




(1)What is JavaScript?
---->JavaScript is a dynamic computer programming language. 
     It is lightweight and most commonly used as a part of web pages, 
    whose implementations allow client-side script to interact with the user 
    and make dynamic pages. It is an interpreted programming language with 
    object-oriented capabilities.

     JavaScript was first known as LiveScript, but Netscape changed its name
     to JavaScript, possibly because of the excitement being generated by Java.
     JavaScript made its first appearance in Netscape 2.0 in 1995 with the 
     name LiveScript. The general-purpose core of the language has been embedded in 
     Netscape, Internet Explorer, and other web browsers.


(2)What is the use of isNaN function?
---->The JavaScript isNaN() Function is used to check whether a given
    value is an illegal number or not. It returns true if the value is a 
   NaN else returns false. It is different from the Number.isNaN() Method.

  Syntax:

    isNaN( value )
    Parameter Values: This method accepts a single parameter as mentioned 
    above and described below: 

    value: It is a required value passed in the isNaN() function.
   The JavaScript isNaN() Function is used to check whether a given
   value is an illegal number or not. It returns true if the value is a NaN
   else returns false. It is different from the Number.isNaN() Method.


(3)What is negative Infinity? 
--->  The negative infinity in JavaScript is a constant value that 
     is used to represent a value that is the lowest available. This
    means that no other number is lesser than this value. It can be
    generated using a self-made function or by an arithmetic operation. 

   Note: JavaScript shows the NEGATIVE_INFINITY value as -Infinity.

   Negative infinity is different from mathematical infinity in the
   following ways:

  Negative infinity results in -0(different from 0 ) when divided by 
  any other number.
  When divided by itself or positive infinity, negative infinity
  return NaN
  Negative infinity, when divided by any positive number (apart from 
  positive infinity) is negative infinity.
  Negative infinity, divided by any negative number (apart from negative
  infinity) is positive infinity.
  If we multiply negative infinity with NaN, we will get NaN as a result.
 The product of 0 and negative infinity is Nan.
 The product of two negative infinities is always a positive infinity.
 The product of both positive and negative infinity 
 is always negative infinity.


  Syntax: 


  Number.NEGATIVE_INFINITY


(4)Which company developed JavaScript?
--->This post presents a brief history of how Brendan Eich created
    JavaScript and what influenced its design decisions. A company called
    Netscape was founded in 1994 and created one of the first web browsers.
    They recruited Eich in 1995, because

(5)What are undeclared and undefined variables?
--->Undefined: It occurs when a variable has been declared but 
   has not been assigned with any value. Undefined is not a keyword.

   Undeclared: It occurs when we try to access any variable that is not
   initialized or declared earlier using var or const keyword. If we use 
  ‘typeof’ operator to get the value of an undeclared variable, we will face
   the runtime error with return value as “undefined”. The scope of the 
  undeclared variables is always global.

   For example:

     Undefined:
     var geek;
     undefined
     console.log(geek) 

     Undeclared:
      //ReferenceError: myVariable is not defined
      console.log(myVariable) 
       they wanted him to create a programming language for that web browser


(6) Write the code for adding new elements dynamically?
--->New elements can be dynamically created in JavaScript with the 
   help of createElement() method. The attributes of the created element 
   can be set using the setAttribute() method. 

(7)What is the difference between ViewState and SessionState? 
--->     ViewState

      -Maintained at page level only.
      -View state can only be visible from a single page and not
       multiple pages.
      -It will retain values in the event of a postback operation
       occurring.
      -Information is stored on the client’s end only.
      -used to allow the persistence of page-instance-specific data.
      -ViewState values are lost/cleared when new page is loaded.


       SessionState

     
       -Maintained at session level.
       -Session state value availability is across all pages available
        in a user session.
       -in session state, user data remains in the server. Data is available
        to user until the browser is closed or there is session expiration.
       -Information is stored on the server.
       -used for the persistence of user-specific data on the server’s end.
       -SessionState can be cleared by programmer or user or in case of timeouts.
       

(8)What is === operator?
--->JavaScript Equal Value Equal Type (===) Comparison Operator is 
   used to check if two values are equal both in value and type. Equal
   Value Equal Type operator returns a boolean value. The return value is
   true if the two values are equal both in value and datatype, else, 
   the return vale is false.

(9)How can the style/class of an element be changed? 
--->we will learn how we can change the style/class of an element.
 If you want to build a cool website or app then UI plays an important
 role. We can change, add or remove any CSS property from an HTML element
 on the occurrence of any event with the help of JavaScript. There are two
 approaches that allow us to achieve this task.

  Approach 1: Changing CSS with the help of the style property:

     Syntax:

          document.getElementById("id").style.property = new_style

   Approach 2: Changing the class itself – We can use two properties
     that can be used to manipulate the classes.

    1. The classList Property: The classList is a read-only property 
     that returns the CSS class names of an element as a DOMTokenList object. 

  Syntax:

     document.getElementById("id").classList
      You can use the below-mentioned methods to add classes, remove classes,
     and toggle between different classes respectively.

     The add() method: It adds one or more classes.
      The remove() method: It removes one or more classes.
     The toggle() method: If the class does not exist it adds it and 
     returns true. It removes the class and returns false. The second 
     boolean argument forces the class to be added or removed.

    2. The className Property: This property is used to set the current 
      class of the element to the specified class.

   Syntax:

       document.getElementById("id").className = class


(10)How to read and write a file using JavaScript?
--->the writeFile() operation is called. The writeFile() method is
    used to write into the file in JavaScript. The syntax of this method
    is as follows −

     writeFile(path,inputData,callBackFunction)


     Reading from the file
      After the File System module is imported, the reading of the file
      in JavaScript can be done by using the readFile() function.

   Syntax
     The syntax to read from a file is as follows −

     readFile(path, format, callBackFunc)

(11)What are all the looping structures in JavaScript?
--->1.Entry Controlled loops: In this type of loops the test condition
    is tested before entering the loop body. For Loop and While Loop are 
    entry controlled loops.

    2.Exit Controlled Loops: In this type of loops the test condition is
    tested or evaluated at the end of loop body. Therefore, the loop body
    will execute atleast once, irrespective of whether the test condition is
    true or false. do – while loop is exit controlled loop.

(12)How can you convert the string of any base to an integer in JavaScript?
--->Given a string containing an integer value and along with that user
    passes a base value. We need to convert that string of any base value to
    an integer in JavaScript.

      String          Integer
     "1002"            1002

   For performing the above-illustrated task, we would be using a method
    (or a function) provided by JavaScript called as parseInt(). 

  This is a special method, provided by JavaScript, that takes an integer
  value (of any base which is either specified or not) and further converts
   the string into an integer value.

   Syntax:


    Following is the syntax that a user may use to convert a string into
   an integer value (of any base)-

   parseInt(string_value, base)
   Alternatively, if we don’t want to specify the base value and just want
    to convert our string value into an integer value itself, then we may use
    the following syntax also-

    parseInt(string_value)
    Default value returned by base or radix of parseInt() method is 10. 
   In other words, if we don’t specify any base or radix value then it by 
   default converts the string value to an integer value by taking into 
   regard the base or radix value as 10.

(13)What is the function of the delete operator? 
--->The JavaScript pop(), shift() or splice() methods are available 
    to delete an element from an array. But because of the key-value pair
   in an object, the deleting is more complicated. Note that, the delete
   operator only works on objects and not on variables or functions.

    Syntax:


     delete object
     // or
    delete object.property
    // or
    delete object['property']

(14)What are all the types of Pop up boxes available in JavaScript? 
--->In Javascript, popup boxes are used to display the message or 
   notification to the user. There are three types of pop-up boxes in
   JavaScript namely Alert Box, Confirm Box and Prompt Box.

   Alert Box: It is used when a warning message is needed to be produced.
  When the alert box is displayed to the user, the user needs to press ok 
  and proceed.

    Syntax: 

     alert("your Alert here")


   Prompt Box: It is a type of pop up box which is used to get the user
   input for further use. After entering the required details user have to
   click ok to proceed next stage else by pressing the cancel button user 
   returns the null value.

   Syntax:  

    prompt("your Prompt here")



   Confirm Box: It is a type of pop-up box that is used to get 
    authorization or permission from the user. The user has to press the
   ok or cancel button to proceed.

   Syntax:

    confirm("your query here")


(15)What is the use of Void (0)? 
--->The void operator is used to evaluate an expression and returns
    the undefined. Generally, this operator is used for obtaining the
   undefined primitive value. It is often used with hyperlinks. Usually
   the browser refreshes the page or loads a new page on clicking a link.
   The javascript:void(0) can be used when we don't want to refresh or load
   a new page in the browser on clicking a hyperlink.

    We can use the operand 0 in two ways that are void(0) or void 0.
    Both of the ways work the same. The JavaScript:void(0) tells the browser
    to "do nothing" i.e., prevents the browser from reloading or refreshing
    the page. It is useful when we insert links that have some important
    role on the webpage without any reloading. So, using void(0) on such
    links prevents the reloading of the page but allows to perform a useful
   function such as updating a value on the webpage.

   Syntax
     void expression;

(16)How can a page be forced to load another page in JavaScript? 
--->Approach: We can use window.location property inside the script tag
   to forcefully load another page in Javascript. It is a reference to a
  Location object that is it represents the current location of the document
  . We can change the URL of a window by accessing it.

   Syntax:

       <script>
             window.location = <Path / URL>
       </script> 

(17)What are the disadvantages of using innerHTML in JavaScript? 
--->The use of innerHTML very slow: The process of using innerHTML is much
     slower as its contents as slowly built, also already parsed contents and
     elements are also re-parsed which takes time.

    Preserves event handlers attached to any DOM elements: The event 
     handlers do not get attached to the new elements created by setting 
     innerHTML automatically. To do so one has to keep track of the event
     handlers and attach it to new elements manually. This may cause a memory
     leak on some browsers.

    Content is replaced everywhere: Either you add, append, delete or
    modify contents on a webpage using innerHTML, all contents is replaced,
   also all the DOM nodes inside that element are reparsed and recreated.

     Appending to innerHTML is not supported: Usually, += is used for
     appending in JavaScript. But on appending to an Html tag using innerHTML,
    the whole tag is re-parsed.


    




