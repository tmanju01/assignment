
MODULE: 5 (JQuery Basic, Effects & Advance


(1) What is JQuery?
--->jQuery is a small, light-weight and fast JavaScript library. It is cross-platform and supports 
     different types of browsers. It is also referred as ?write less do more? because it takes a lot of 
    common tasks that requires many lines of JavaScript code to accomplish, and binds them into methods 
    that can be called with a single line of code whenever needed. It is also very useful to 
    simplify a lot of the complicated things from JavaScript, like AJAX calls and DOM manipulation.


   -jQuery is a small, fast and lightweight JavaScript library.
   -jQuery is platform-independent.
   -jQuery means "write less do more".
   -jQuery simplifies AJAX call and DOM manipulation.


(2)How to Apply CSS Using JQuery, How to Add Class and Remove Class in JQuery,JQuery Animation? 
--->It is possible to change the CSS property of an element by using a simple JavaScript API, but 
    we try to complete this challenge using jQuery css() method.  

    Syntax:

      $().css(propertyname, value);
      $().css(properties);
          
       There are many types of CSS methods, which means that each method has the same name but takes
       different parameters. We will discuss only two methods, one of which is used to change a single CSS property,
       while the other is used to change multiple CSS properties simultaneously. With the second method, you can pass 
       a JSON string object as a parameter that you want to apply to the HTML element. 


   --->The addClass() or removeClass() methods are used to add the CSS classes when there is a need to add to our
     webpage when there is some event listener or to create some kind of effect.

     In this article, let us see how can we add a CSS class or remove a CSS class in jQuery.

     Syntax:

         Adding a class:
            $('selector').addClass(class_name);

         Removing a class:
            $('selector').removeClass(class_name);

  --->The animate() is an inbuilt method in jQuery which is used to change the state of the element with CSS style.
     This method can also be used to change the CSS property to create the animated effect for the selected element.

      Syntax:

          (selector).animate({styles}, para1, para2, para3);

(3)How to create slider with animation? 
--->A slideshow is used to cycle through elements:

       <!DOCTYPE html>
       <html>
       <head>
        <meta name="viewport" content="width=device-width, initial-scale=1">
       <style>
         * {box-sizing: border-box}
          body {font-family: Verdana, sans-serif; margin:0}
          .mySlides {display: none}
           img {vertical-align: middle;}

         /* Slideshow container */
       .slideshow-container {
       max-width: 1000px;
       position: relative;
       margin: auto;
       }

    /* Next & previous buttons */
    .prev, .next {
    cursor: pointer;
    position: absolute;
    top: 50%;
    width: auto;
    padding: 16px;
    margin-top: -22px;
    color: white;
    font-weight: bold;
    font-size: 18px;
    transition: 0.6s ease;
    border-radius: 0 3px 3px 0;
    user-select: none;
   }

   /* Position the "next button" to the right */
   .next {
    right: 0;
    border-radius: 3px 0 0 3px;
   }

   /* On hover, add a black background color with a little bit see-through */
   .prev:hover, .next:hover {
    background-color: rgba(0,0,0,0.8);
  }

   /* Caption text */
   .text {
    color: #f2f2f2;
  font-size: 15px;
  padding: 8px 12px;
  position: absolute;
  bottom: 8px;
  width: 100%;
  text-align: center;
  }

    /* Number text (1/3 etc) */
   .numbertext {
   color: #f2f2f2;
   font-size: 12px;
   padding: 8px 12px;
   position: absolute;
   top: 0;
  }

   /* The dots/bullets/indicators */
  .dot {
   cursor: pointer;
  height: 15px;
  width: 15px;
  margin: 0 2px;
  background-color: #bbb;
  border-radius: 50%;
  display: inline-block;
  transition: background-color 0.6s ease;
  }

  .active, .dot:hover {
  background-color: #717171;
  }

  /* Fading animation */
  .fade {
  animation-name: fade;
  animation-duration: 1.5s;
  }

  @keyframes fade {
  from {opacity: .4} 
  to {opacity: 1}
 }

  /* On smaller screens, decrease text size */
  @media only screen and (max-width: 300px) {
  .prev, .next,.text {font-size: 11px}
  }
  </style>
 </head>
 <body>

  <div class="slideshow-container">

  <div class="mySlides fade">
  <div class="numbertext">1 / 3</div>
  <img src="img_nature_wide.jpg" style="width:100%">
  <div class="text">Caption Text</div>
  </div>

  <div class="mySlides fade">
  <div class="numbertext">2 / 3</div>
  <img src="img_snow_wide.jpg" style="width:100%">
  <div class="text">Caption Two</div>
  </div>

<div class="mySlides fade">
  <div class="numbertext">3 / 3</div>
  <img src="img_mountains_wide.jpg" style="width:100%">
  <div class="text">Caption Three</div>
  </div>

   <a class="prev" onclick="plusSlides(-1)">❮</a>
   <a class="next" onclick="plusSlides(1)">❯</a>

  </div>
  <br>

  <div style="text-align:center">
  <span class="dot" onclick="currentSlide(1)"></span> 
  <span class="dot" onclick="currentSlide(2)"></span> 
  <span class="dot" onclick="currentSlide(3)"></span> 
  </div>

  <script>
  let slideIndex = 1;
  showSlides(slideIndex);

  function plusSlides(n) {
   showSlides(slideIndex += n);
  }

  function currentSlide(n) {
     showSlides(slideIndex = n);
   }

  function showSlides(n) {
   let i;
   let slides = document.getElementsByClassName("mySlides");
   let dots = document.getElementsByClassName("dot");
   if (n > slides.length) {slideIndex = 1}    
   if (n < 1) {slideIndex = slides.length}
   for (i = 0; i < slides.length; i++) {
    slides[i].style.display = "none";  
   }
   for (i = 0; i < dots.length; i++) {
    dots[i].className = dots[i].className.replace(" active", "");
   }
   slides[slideIndex-1].style.display = "block";  
   dots[slideIndex-1].className += " active";
 }
 </script>

  </body>
  </html> 

